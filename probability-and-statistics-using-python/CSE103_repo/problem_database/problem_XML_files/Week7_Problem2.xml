<problem>
  <text>
    <script type="loncapa/python">

#### Written by Yoav Freund 11/3/2016

# random variables (no need to import random library)
def rand_vals(i=1,j=100,n=3):
    return [random.randrange(i,j,1) for k in range(n)]
a_rand=rand_vals() ; b_rand=rand_vals(n=2)
a_vals=[]; b_vals=[];
for i in range(len(a_rand)):
    for j in range(len(b_rand)):
        a_vals.append(a_rand[i])
        b_vals.append(b_rand[j])
variable_values = {'a':a_vals, 'b':b_vals}

# Random valued coefficients:
[c,d,e]=rand_vals(i=2,j=8,n=3)

#index_of_test_value = 2 #should not be used.
# Solutions with variables converted to string
# Make sure you name the solution with part id at the end. e.g. 'solution1' will be solution for part 1. 
solution1 = "{0}*a-{0}*a".format(c)
solution2 = "{0}*a-{0}*a".format(c)
solution3 = "{0}*a-{1}*a".format(c,d)
solution4 = "(({0})^2)*b".format(c)
solution5 = "2*(({0})^2)*b".format(c,d)
solution6 = "0"

# Group all solutions into a list
solutions = [solution1, solution2, solution3, solution4, solution5, solution6]
# hint id
hint_text_id = ["cse103fall2016week1problem1part1","cse103fall2016week1problem1part2"]
    </script>

    <script type="text/javascript">
      //fill in number of hint
        var hint_number = 2;

      //fill in hint input box id
        var hintIds = ["input_57ccdc78397649aca59b419c95573254_2_1",
                "input_1ddc9e0c3eea4ba3b61b291a7cfb650d_2_1"];

      //fill in problem input box id
        var proIds = ["input_0463a3ce78dd46429e9e2fcf681616d9_2_1",
               "input_0463a3ce78dd46429e9e2fcf681616d9_3_1"];
               
      //fill in hint text id. Need to match the hint_text_id from above
        var hintTextIds = ["cse103fall2016week1problem1part1",
                  "cse103fall2016week1problem1part2"];
    </script>



<h1>Expectation and Variance Calculations</h1><p>Suppose \(X_1,X_2\) are independent and identically distributed random variables such that \(a=E(X_1)=E(X_2)\) , \(b=Var(X)\) </p><p>Express the following using \(a\) and \(b\):</p><p>(1) \(E($c X_1 - $c X_2)\)</p>

    <customresponse cfn="check" expect="\[$solution1\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


<p>(2) \(E($c X_1 - $c X_1)\)</p>

    <customresponse cfn="check" expect="\[$solution2\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


<p>(3) \(E($c X_1 - $d X_1)\)</p>

    <customresponse cfn="check" expect="\[$solution3\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


<p>(4) \(Var($c X_1 + $e)\)</p>

    <customresponse cfn="check" expect="\[$solution4\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


<p>(5) \(Var($c X_1 - $c X_2)\)</p>

    <customresponse cfn="check" expect="\[$solution5\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


<p>(6) \(Var($c X_1 - $c X_1)\)</p>

    <customresponse cfn="check" expect="\[$solution6\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>



    
    

    

    <script type="loncapa/python">
from hint import evaluate
from hint.get_hint import get_hint_w_variables

# grader of the problem
def check(expect, ans):
  return evaluate.evaluate_w_variables(expect, ans, variable_values)

# hint function
def hint_fn(answer_ids, student_answers, new_cmap, old_cmap):
  aid = answer_ids[0]
  ans = str(student_answers[aid])
  i = int(aid[-3])-2

  if ans == "":
    return
  key = new_cmap.keys()[0]
  if new_cmap[key]['correctness'] == "correct":
    return

  hint = get_hint_w_variables(solutions[i], ans, hint_text_id, i, variable_values)
  new_cmap.set_hint_and_mode(aid,hint,'always')
    </script>

        
    <script type="text/javascript" src="/static/js/adaptive_hint.js"></script>
    <script type="text/javascript">                             
      for (var i=0; i != hint_number; i++) {
        hide_hint(i);
      }
      show_hint(hint_number);
    </script>

  </text>
</problem>