<problem>
  <text>
    <script type="loncapa/python">

n = random.randrange(10,20,1)

solution1 = "10!"
solution2 = "{0}!/({0}-3)!".format(n)

solutions = [solution1, solution2]
# hint text id
hint_text_id = ["cse103fall2016week1problem1part1","cse103fall2016week1problem1part2"]
    </script>

    <script type="text/javascript">
      //fill in number of hint
        var hint_number = 2;

      //fill in hint input box id
        var hintIds = ["input_57ccdc78397649aca59b419c95573254_2_1",
                "input_1ddc9e0c3eea4ba3b61b291a7cfb650d_2_1"];

      //fill in problem input box id
        var proIds = ["input_0463a3ce78dd46429e9e2fcf681616d9_2_1",
               "input_0463a3ce78dd46429e9e2fcf681616d9_3_1"];
               
      //fill in hint text id. Need to match the hint_text_id from above
        var hintTextIds = ["cse103fall2016week1problem1part1",
                  "cse103fall2016week1problem1part2"];
    </script>



<p>Suppose there are four children---Alice, Bill, Christie, and Doug---at an animal shelter, checking out the current pool of \(n\) dogs. Each child writes down the name of the dog he or she likes most. How many possible outcomes are there?</p><p>We can represent each outcome as a 4-tuple (Alice's choice, Bill's choice, Christie's choice, Doug's choice) in which each entry is the name of a dog. So the number of outcomes is \[n^4\]</p><p>Now suppose that these same children are actually picking out dogs. First Alice chooses a dog to adopt, then Bill chooses a dog to adopt, and so on. How many outcomes are there now?</p><p>In this situation, Alice has \(n\) choices, but Bill has only \(n-1\) choices, Christie has \(n-2\) choices, and Doug has \(n-3\) choices. So there are \(n(n-1)(n-2)(n-3)\) possible outcomes.</p><p>The first situation is called <em>sampling with replacement</em>: the outcomes are tuples in which the same element (dog) can occur more than once. The number of such \(k\) tuples, chosen from \(n\) elements, is \(n^k\)  In the example, \(k=4\)</p><p>The second situation is <em>sampling without replacement</em>: the outcomes are tuples in which no element can be repeated. The number of such \(k\) tuples, chosen from \(n\) elements, is</p><p>\[n(n-1)(n-2) \cdots (n-k+1)\]</p><p>Here's a related question: how many ways are there to order (shuffle) a deck of 52 cards?  (Each such ordering is called a <em>permutation</em> of the cards.) Well, the result is a 52-tuple, drawn from a set of size 52, in which no card is repeated. Therefore, the number of permutations is \(52 \cdot 51 \cdot 50 \cdots 1\)  which is called \(52 \)  <em>factorial</em> and denoted as \(52!\)  More generally, the number of permutations of \(n\) elements is \(n\) factorial or \(n!\)</p><p>To recap, how many ways are there to order 10 elements?</p>

    <customresponse cfn="check" expect="\[$solution1\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


<p>(you can use expressions such as 3*2 and 7! in your answer).</p><p>Coming back to sampling \(k\) out of \(n\) elements without replacement, we can write it succinctly as</p><p>\[ n(n-1)(n-2) \cdots (n-k+1) = \frac{n!}{(n-k)!} \]</p><p><em>Question:</em>Suppose you have a deck with $n different cards. How many ways are there to choose 3 cards out of this deck? (the order of the 3 picked out cards <em>does</em> matter)</p>

    <customresponse cfn="check" expect="\[$solution2\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>



    
    

    

    <script type="loncapa/python">
from hint import evaluate
from hint.get_hint import get_hint

# grader of the problem
def check(expect, ans):
  return evaluate.evaluate(expect, ans)

# hint function
def hint_fn(answer_ids, student_answers, new_cmap, old_cmap):
  aid = answer_ids[0]
  ans = str(student_answers[aid])
  i = int(aid[-3])-2

  if ans == "":
    return
  key = new_cmap.keys()[0]
  if new_cmap[key]['correctness'] == "correct":
    return

  hint = get_hint(solutions[i], ans, hint_text_id, i)
  new_cmap.set_hint_and_mode(aid,hint,'always')
    </script>

        
    <script type="text/javascript" src="/static/js/adaptive_hint.js"></script>
    <script type="text/javascript">                             
      for (var i=0; i != hint_number; i++) {
        hide_hint(i);
      }
      show_hint(hint_number);
    </script>

  </text>
</problem>