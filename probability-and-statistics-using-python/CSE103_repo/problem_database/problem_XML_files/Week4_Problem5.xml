<problem>
  <text>
    <script type="loncapa/python">

# random variables (no need to import random library)

# Solutions with variables converted to string
# Make sure you name the solution with part id at the end. e.g. 'solution1' will be solution for part 1.
solution1 = "4^2"
solution2 = "C(52-5,2) - C(52-5-4,2)"
solution3 = "C(52-5,2)"
solution4 = "(C(52-5,2) - C(52-5-4,2) + 4^2) / C(52-5,2)"


# Group all solutions into a list
solutions = [solution1, solution2, solution3, solution4]


# hint text id
hint_text_id = ["cse103fall2016week1problem1part1","cse103fall2016week1problem1part2"]
    </script>

    <script type="text/javascript">
      //fill in number of hint
        var hint_number = 2;

      //fill in hint input box id
        var hintIds = ["input_57ccdc78397649aca59b419c95573254_2_1",
                "input_1ddc9e0c3eea4ba3b61b291a7cfb650d_2_1"];

      //fill in problem input box id
        var proIds = ["input_0463a3ce78dd46429e9e2fcf681616d9_2_1",
               "input_0463a3ce78dd46429e9e2fcf681616d9_3_1"];
               
      //fill in hint text id. Need to match the hint_text_id from above
        var hintTextIds = ["cse103fall2016week1problem1part1",
                  "cse103fall2016week1problem1part2"];
    </script>



<p>In Texas Hold'Em, a standard 52-card deck is used. Each player is dealt two cards from the deck face down so that only the player that got the two cards can see them. After checking his two cards, a player places a bet. The dealer then puts 5 cards from the deck face up on the table, this is called the "board" or the "communal cards" because all players can see and use them. The board is layed down in 3 steps: first, the dealer puts 3 cards down (that is called "the flop") followed by two single cards, the first is called "the turn" and the second is called "the river". After the flop, the turn and the river each player can update their bet. The winner of the game is the person that can form the strongest 5-card hand from the 2 cards in their hand and any 3 of the 5 cards in the board. In previous homework you calculated the probability of getting each 5-card hand.</p><p>Here we are interested in something a bit more complex: what is the probability of a particular hand given the cards that are currently available to the player.</p><p>The outcome space in this kind of problem is the set of 7 cards the user has at his disposal after all 5 board cards have been dealt. The size of this space is \(|\Omega| = C(52,7)\)</p><p>Suppose that \(A, B\) are events, i.e. subsets of \(\Omega\). We will want to calculate conditional probabilities of the type \(P(A|B)\). Given that the probability of each set of seven cards  is equal to \(1/C(52,7)\) we get that the conditional probability can be expressed as:</p><p>\[P(A|B) = \frac{P(A \cap B)}{P(B)} =\frac{\frac{|A \cap B|}{|\Omega|}}{\frac{|B|}{|\Omega|}} = \frac{|A \cap B|}{|B|} \]</p><p>Therefore the calculation of conditional probability (for finite sample spaces with uniform distribution) boils down to calculating the ratio between the sizes of two sets.</p><ul><li><p>Suppose you have been dealt "4\(\heartsuit\), 5\(\heartsuit\)".</p></li><li><p>What is the conditional probability that you will get a straight given that you have been dealt these two cards, and that the flop is "2\(\clubsuit\), 6\(\spadesuit\), K\(\diamondsuit\)"?</p><ul><li>Define \(B\) as the set {7-card hands that contain these 5 cards already revealed}.</li><li>Define \(A\) as the set {7-card hands that contain a straight}.The question is asking for \(P(A|B)\). According to the formula above we need to find \(|A\cap B|\) and \(|B|\).</li><li>In this case \(A \cap B\) is the set {7-card hands that contain the 5 revealed cards AND contain a straight}. To get a straight, the remaining two cards (turn and river) must either be {7,8} or contain 3. We hence define two subsets within \(A \cap B\):</li><li>\(S_1\): {7-card hands that are in \(A \cap B\) AND the remaining two cards are 7 and 8, regardless of order}.</li></ul><p>\(|S_1|=\)</p>

    <customresponse cfn="check" expect="\[$solution1\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


<ul><li>\(S_2\): {7-card hands that are in \(A \cap B\) AND its turn and river contain 3}.</li></ul><p>\(|S_2| = \)</p>

    <customresponse cfn="check" expect="\[$solution2\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


<p>Because there is no overlap in these two subsets \(S_1 \cap S_2 = \emptyset\) and these two subsets cover all possible valid hands \(A \cap B = S_1 \cup S_2 \), by definition \(S_1\) and \(S_2\) form a <em>partition</em> of \(A \cap B\), and we have \(|A \cap B| = |S_1| + |S_2|\).</p><ul><li>Computing \(|B|\) should be easy. 5 cards in the hand are already fixed, so we can choose any card as our turn and river from the rest 47 cards.</li></ul><p>\(|B| = \)</p>

    <customresponse cfn="check" expect="\[$solution3\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


<ul><li>The conditional probability</li></ul><p>\(P(A|B) = \frac{P(A \cap B)}{P(B)} = \frac{|A\cap B|}{|B|} = \frac{|S_1|+|S_2|}{|B|}\) is</p>

    <customresponse cfn="check" expect="\[$solution4\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


</li></ul><hr />
    
    

    

    <script type="loncapa/python">
from hint import evaluate
from hint.get_hint import get_hint

# grader of the problem
def check(expect, ans):
  return evaluate.evaluate(expect, ans)

# hint function
def hint_fn(answer_ids, student_answers, new_cmap, old_cmap):
  aid = answer_ids[0]
  ans = str(student_answers[aid])
  i = int(aid[-3])-2

  if ans == "":
    return
  key = new_cmap.keys()[0]
  if new_cmap[key]['correctness'] == "correct":
    return

  hint = get_hint(solutions[i], ans, hint_text_id, i)
  new_cmap.set_hint_and_mode(aid,hint,'always')
    </script>

        
    <script type="text/javascript" src="/static/js/adaptive_hint.js"></script>
    <script type="text/javascript">                             
      for (var i=0; i != hint_number; i++) {
        hide_hint(i);
      }
      show_hint(hint_number);
    </script>

  </text>
</problem>