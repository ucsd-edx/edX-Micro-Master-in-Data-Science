<problem>
  <text>
    <script type="loncapa/python">
# random variables (no need to import random library)


# Solutions with variables converted to string
# Make sure you name the solution with part id at the end. e.g. 'solution1' will be solution for part 1. 
option1 = ('1','6','10','A set that can be mapped to the natural numbers','\(\infty\)')
solution1 = '1'
option2 = ('1','6','10','A set that can be mapped to the natural numbers','\(\infty\)')
solution2 = 'A set that can be mapped to the natural numbers'
option3 = ('1','6','10','A set that can be mapped to the natural numbers','\(\infty\)')
solution3 = '\(\infty\)'
option4 = ('1','6','10','A set that can be mapped to the natural numbers','\(\infty\)')
solution4 = '\(\infty\)'
option5 = ('1','6','10','A set that can be mapped to the natural numbers','\(\infty\)')
solution5 = '6'
option6 = ('1','6','10','A set that can be mapped to the natural numbers','\(\infty\)')
solution6 = '10'

solutions = [solution1, solution2, solution3, solution4, solution5, solution6]

# hint text id
hint_text_id = ["cse103fall2016week1problem1part1","cse103fall2016week1problem1part2"]
    </script>

    <script type="text/javascript">
      //fill in number of hint
        var hint_number = 2;

      //fill in hint input box id
        var hintIds = ["input_57ccdc78397649aca59b419c95573254_2_1",
                "input_1ddc9e0c3eea4ba3b61b291a7cfb650d_2_1"];

      //fill in problem input box id
        var proIds = ["input_0463a3ce78dd46429e9e2fcf681616d9_2_1",
               "input_0463a3ce78dd46429e9e2fcf681616d9_3_1"];
               
      //fill in hint text id. Need to match the hint_text_id from above
        var hintTextIds = ["cse103fall2016week1problem1part1",
                  "cse103fall2016week1problem1part2"];
    </script>



<p>Read the new notes posted on Moodle, titled "Random variables, Expected values, Infinite Spaces". Then match each expression with a value or term in the dropdown list below.</p>
<ul>
<li>If \(r=1/2\), \(\sum_{i=1}^{\infty} r^i = \)</li>
</ul>


    <optionresponse>
      <optioninput options="('1','6','10','A set that can be mapped to the natural numbers','\(\infty\)')" correct="1"/>
  	</optionresponse>


<ul>
<li>Which is a countable set</li>
</ul>


    <optionresponse>
      <optioninput options="('1','6','10','A set that can be mapped to the natural numbers','\(\infty\)')" correct="A set that can be mapped to the natural numbers"/>
  	</optionresponse>


<ul>
<li>\(\sum_{i=1}^{\infty} \frac{1}{i}=\)</li>
</ul>


    <optionresponse>
      <optioninput options="('1','6','10','A set that can be mapped to the natural numbers','\(\infty\)')" correct="\(\infty\)"/>
  	</optionresponse>


<ul>
<li>If \(r=1\), \(\sum_{i=1}^{\infty} r^i =\)</li>
</ul>


    <optionresponse>
      <optioninput options="('1','6','10','A set that can be mapped to the natural numbers','\(\infty\)')" correct="\(\infty\)"/>
  	</optionresponse>


<ul>
<li>If \(r=2/3\), \(\sum_{i=1}^{\infty} i r^i = \)</li>
</ul>


    <optionresponse>
      <optioninput options="('1','6','10','A set that can be mapped to the natural numbers','\(\infty\)')" correct="6"/>
  	</optionresponse>


<ul>
<li>Flipping a coin with \(P(head)=0.1\), the expected number of flips until the first head is </li>
</ul>


    <optionresponse>
      <optioninput options="('1','6','10','A set that can be mapped to the natural numbers','\(\infty\)')" correct="10"/>
  	</optionresponse>


    
    

    

    <script type="loncapa/python">
from hint import evaluate
from hint.get_hint import get_hint

# grader of the problem
def check(expect, ans):
  return evaluate.evaluate(expect, ans)

# hint function
def hint_fn(answer_ids, student_answers, new_cmap, old_cmap):
  aid = answer_ids[0]
  ans = str(student_answers[aid])
  i = int(aid[-3])-2

  if ans == "":
    return
  key = new_cmap.keys()[0]
  if new_cmap[key]['correctness'] == "correct":
    return

  hint = get_hint(solutions[i], ans, hint_text_id, i)
  new_cmap.set_hint_and_mode(aid,hint,'always')
    </script>

        
    <script type="text/javascript" src="/static/js/adaptive_hint.js"></script>
    <script type="text/javascript">                             
      for (var i=0; i != hint_number; i++) {
        hide_hint(i);
      }
      show_hint(hint_number);
    </script>

  </text>
</problem>