<problem>
  <text>
    <script type="loncapa/python">

# random variables (no need to import random library)
#false burglary percentage
atpt = random.randrange(92,96,1)
perc=atpt/100

#burglary percentage
fals = random.randrange(1,3,1)
fperc = fals/100

# Solutions with variables converted to string
# Make sure you name the solution with part id at the end. e.g. 'solution1' will be solution for part 1.
solution1 = "1/10000"
solution2 = "{0}/10000 + {1}*(1-1/10000)".format(perc, fperc)
solution3 = "{0}/10000".format(perc)
solution4 = "({1})/({0})".format(solution2,solution3)

# Group all solutions into a list
solutions = [solution1, solution2, solution3, solution4]


# hint text id
hint_text_id = ["cse103fall2016week1problem1part1","cse103fall2016week1problem1part2"]
    </script>

    <script type="text/javascript">
      //fill in number of hint
        var hint_number = 2;

      //fill in hint input box id
        var hintIds = ["input_57ccdc78397649aca59b419c95573254_2_1",
                "input_1ddc9e0c3eea4ba3b61b291a7cfb650d_2_1"];

      //fill in problem input box id
        var proIds = ["input_0463a3ce78dd46429e9e2fcf681616d9_2_1",
               "input_0463a3ce78dd46429e9e2fcf681616d9_3_1"];
               
      //fill in hint text id. Need to match the hint_text_id from above
        var hintTextIds = ["cse103fall2016week1problem1part1",
                  "cse103fall2016week1problem1part2"];
    </script>



<h2>Bayes' Burglary</h2><ul><li>The following example is taken from <em>Probabilistic Reasoning in Intelligent Systems</em> by Judea Pearl:</li></ul><p>You wake up in the middle of the night to the shrill sound of your burglar alarm. What is the chance that a burglary attempt has taken place? The relevant facts are:</p><ul><li><p>There is a $atpt% chance that an attempted burglary attempt will trigger the alarm. That is\[P(\mbox{alarm} | \mbox{burglary}) = $atpt/100\]</p></li><li><p>There is a $fals% chance of a false alarm.\[P(\mbox{alarm} | \mbox{no burglary}) = $fals/100\]</p></li><li><p>Based on local crime statistics, there is a one-in-ten-thousand chance that a house will be burglarized on a given night.  </p></li><li><p>What is \(P(\mbox{burglary})\)</p></li></ul>

    <customresponse cfn="check" expect="\[$solution1\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


<ul><li><p>We are interested in the chance of a burglary given that the alarm has sounded. We can use the conditional probability formula for this:\[P(\mbox{burglary} | \mbox{alarm}) \ = \ \frac{P(\mbox{burglary and alarm})}{P(\mbox{alarm})} \ = \ \frac{P(\mbox{alarm} | \mbox{burglary}) P(\mbox{burglary})}{P(\mbox{alarm})}\]</p></li><li><p>The one term we don't immediately know is \(P(\mbox{alarm})\).  By the summation rule,\[P(\mbox{alarm}) \ = \ P(\mbox{alarm} | \mbox{burglary}) P(\mbox{burglary}) + P(\mbox{alarm} | \mbox{no burglary}) P(\mbox{no burglary})\]</p></li><li><p>What is \(P(\mbox{alarm})\)?</p></li></ul>

    <customresponse cfn="check" expect="\[$solution2\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


<ul><li>What is \(P(\mbox{burglary}, \mbox{alarm})\)</li></ul>

    <customresponse cfn="check" expect="\[$solution3\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


<ul><li>Putting it all together, using the conditional probability definition mentioned above, what is\[P(\mbox{burglary} | \mbox{alarm})\]</li></ul>

    <customresponse cfn="check" expect="\[$solution4\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


<p>Thus our belief in a burglary has risen approximately a hundredfold from its default value of \(10^{-4}\)  on account of the alarm.</p>
    
    

    

    <script type="loncapa/python">
from hint import evaluate
from hint.get_hint import get_hint

# grader of the problem
def check(expect, ans):
  return evaluate.evaluate(expect, ans)

# hint function
def hint_fn(answer_ids, student_answers, new_cmap, old_cmap):
  aid = answer_ids[0]
  ans = str(student_answers[aid])
  i = int(aid[-3])-2

  if ans == "":
    return
  key = new_cmap.keys()[0]
  if new_cmap[key]['correctness'] == "correct":
    return

  hint = get_hint(solutions[i], ans, hint_text_id, i)
  new_cmap.set_hint_and_mode(aid,hint,'always')
    </script>

        
    <script type="text/javascript" src="/static/js/adaptive_hint.js"></script>
    <script type="text/javascript">                             
      for (var i=0; i != hint_number; i++) {
        hide_hint(i);
      }
      show_hint(hint_number);
    </script>

  </text>
</problem>
