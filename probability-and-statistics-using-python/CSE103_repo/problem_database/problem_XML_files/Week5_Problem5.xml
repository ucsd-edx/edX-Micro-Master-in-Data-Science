<problem>
  <text>
    <script type="loncapa/python">

# random variables (no need to import random library)

n = 2*random.randrange(40,50,1)
m = n-1


# Solutions with variables converted to string
# Make sure you name the solution with part id at the end. e.g. 'solution1' will be solution for part 1.
solution1 = "(0.5*0)+(0.5*1)"
solution2 = "(0.5*(0-0.5)^2)+(0.5*(1-0.5)^2)"
solution3 = "0.5-0.5"
solution4 = "0.25+0.25"
solution5 = "0.5-(2*0.5)+0.5"
solution6 = "0.25+(4*0.25)+0.25"
solution7 = "0"
solution8 = "{0}*0.25".format(n)

# Group all solutions into a list
solutions = [solution1,solution2,solution3,solution4,solution5,solution6,solution7,solution8]

# hint text id
hint_text_id = ["cse103fall2016week1problem1part1","cse103fall2016week1problem1part2"]
    </script>

    <script type="text/javascript">
      //fill in number of hint
        var hint_number = 2;

      //fill in hint input box id
        var hintIds = ["input_57ccdc78397649aca59b419c95573254_2_1",
                "input_1ddc9e0c3eea4ba3b61b291a7cfb650d_2_1"];

      //fill in problem input box id
        var proIds = ["input_0463a3ce78dd46429e9e2fcf681616d9_2_1",
               "input_0463a3ce78dd46429e9e2fcf681616d9_3_1"];
               
      //fill in hint text id. Need to match the hint_text_id from above
        var hintTextIds = ["cse103fall2016week1problem1part1",
                  "cse103fall2016week1problem1part2"];
    </script>



<p>Let \(X_1, X_2, \ldots, X_{100}\) be the outcomes of \(100\) independent rolls of a fair coin.</p><p>\[P(X_i=0)=P(X_i=1)=0.5\]</p><p>1.) \(\mathbb{E}(X_1) = \)</p>

    <customresponse cfn="check" expect="\[$solution1\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


<p>2.) \(var(X_1) = \)</p>

    <customresponse cfn="check" expect="\[$solution2\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


<p>Define the random variable \(X = X_1 - X_2\).</p><p>3.) \(\mathbb{E}(X) = \)</p>

    <customresponse cfn="check" expect="\[$solution3\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


<p>4.) \(var(X) = \)</p>

    <customresponse cfn="check" expect="\[$solution4\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


<p><em>Hint:</em> if \(X,Y\) are independent random variables then \(var(X\pm Y)=var(X)+var(Y)\)</p><p>Define the random variable \(Y = X_1 - 2X_2 + X_3\).</p><p>5.) \(\mathbb{E}(Y) = \)</p>

    <customresponse cfn="check" expect="\[$solution5\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


<p>6.) \(var(Y) = \)</p>

    <customresponse cfn="check" expect="\[$solution6\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


<p><em>Hint:</em> if \(a\) is a constant and \(X\) a random variable, then \(var(aX)=a^2 var(X)\).</p><p>Define the random variable \(Z = X_1 - X_2 + X_3 - X_4 + ... + X_{$m} - X_{$n}\).</p><p>7.) \(\mathbb{E}(Z) = \)</p>

    <customresponse cfn="check" expect="\[$solution7\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


<p>8.) \(var(Z) = \)</p>

    <customresponse cfn="check" expect="\[$solution8\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>



    
    

    

    <script type="loncapa/python">
from hint import evaluate
from hint.get_hint import get_hint

# grader of the problem
def check(expect, ans):
  return evaluate.evaluate(expect, ans)

# hint function
def hint_fn(answer_ids, student_answers, new_cmap, old_cmap):
  aid = answer_ids[0]
  ans = str(student_answers[aid])
  i = int(aid[-3])-2

  if ans == "":
    return
  key = new_cmap.keys()[0]
  if new_cmap[key]['correctness'] == "correct":
    return

  hint = get_hint(solutions[i], ans, hint_text_id, i)
  new_cmap.set_hint_and_mode(aid,hint,'always')
    </script>

        
    <script type="text/javascript" src="/static/js/adaptive_hint.js"></script>
    <script type="text/javascript">                             
      for (var i=0; i != hint_number; i++) {
        hide_hint(i);
      }
      show_hint(hint_number);
    </script>

  </text>
</problem>