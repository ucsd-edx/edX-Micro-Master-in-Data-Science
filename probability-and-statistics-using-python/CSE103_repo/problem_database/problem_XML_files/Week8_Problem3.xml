<problem>
  <text>
    <script type="loncapa/python">

# random variables (no need to import random library)
x = random.randrange(8,10,1);
X = x*x;
y = random.randrange(1,5,1);
t=random.randrange(1,4,1)
lambd = 400./X;

for name in ['x','X','y','lambd','t']:
    print name,locals()[name]


# Solutions with variables converted to string
# Make sure you name the solution with part id at the end. e.g. 'solution1' will be solution for part 1.
solution1 = "400/{0}".format(X)
solution2 = "e^{{(-400/{0})}}*(400/{0})^{{({1})}}/({1}!)".format(X,y)
solution3 = "({0}*{0})*(e^{{(-400/{1})}}*(400/{1})^{{({2})}}/({2}!))".format(x,X,y)
solution4 = "1-e^{{(-400/{0}*{1}/24)}}".format(X,t)

# Group all solutions into a list
solutions = [solution1, solution2, solution3, solution4]
solutions
# hint text id
hint_text_id = ["cse103fall2016week1problem1part1","cse103fall2016week1problem1part2"]
    </script>

    <script type="text/javascript">
      //fill in number of hint
        var hint_number = 2;

      //fill in hint input box id
        var hintIds = ["input_57ccdc78397649aca59b419c95573254_2_1",
                "input_1ddc9e0c3eea4ba3b61b291a7cfb650d_2_1"];

      //fill in problem input box id
        var proIds = ["input_0463a3ce78dd46429e9e2fcf681616d9_2_1",
               "input_0463a3ce78dd46429e9e2fcf681616d9_3_1"];
               
      //fill in hint text id. Need to match the hint_text_id from above
        var hintTextIds = ["cse103fall2016week1problem1part1",
                  "cse103fall2016week1problem1part2"];
    </script>



<h2>Probability of getting hit by a bomb</h2>
<p>You will be using Poisson and exponential Distributions in this problem. </p>
<p>Assume that you live in a city district that is being bombed. The district is divided into \($x \times $x\) city blocks of equal area. In other words, the district is divided into \($X\) equal area city blocks. </p>
<p>Assume that the blocks have equal probability of being hit by each bomb. Therefor the probability of each bomb to hit your block is \(1/$X\). Finaly suppose that the rate of bombing averages \(400\) bombs per day.</p>
<h3>Background</h3>
<p>The random process describing the times that the bombs fall is a Poisson process.</p>
<p>This means two things:</p>
<ol>
<li>
<p>The probability that your block is hit by \($k\) bombs in a 24 hour period is:
\[\Pr(X=k) = e^{-\lambda} \frac{\lambda^k}{k!}\]</p>
</li>
<li>
<p>The time difference between two consecutive bombs (\(\Delta\)) is distributed according to the density function:
\[ f(\Delta) = \frac{1}{\lambda} e^{-\lambda \Delta} \]
and by the cumulative probability distribution:
\[ F(\Delta) = 1-e^{-\lambda \Delta}\]</p>
</li>
</ol>
<h3>Questions</h3>
<ul>
<li>What is rate parameter \(\lambda\) in the Poisson Distribution that corresponds to bomb landing on your district?</li>
</ul>


    <customresponse cfn="check" expect="\[$solution1\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


<ul>
<li>What is the probability that your square will receive exactly \($y\) hits in a 24 hour period?</li>
</ul>


    <customresponse cfn="check" expect="\[$solution2\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


<ul>
<li>What is the expected number of city blocks that will receive exactly \($y\) hits in a 24 hour period?</li>
</ul>


    <customresponse cfn="check" expect="\[$solution3\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


<ul>
<li>What is the probability that the time between consecutive hits will be shorter than \($t\) hours?</li>
</ul>


    <customresponse cfn="check" expect="\[$solution4\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>



    
    

    

    <script type="loncapa/python">
from hint import evaluate
from hint.get_hint import get_hint

# grader of the problem
def check(expect, ans):
  return evaluate.evaluate(expect, ans)

# hint function
def hint_fn(answer_ids, student_answers, new_cmap, old_cmap):
  aid = answer_ids[0]
  ans = str(student_answers[aid])
  i = int(aid[-3])-2

  if ans == "":
    return
  key = new_cmap.keys()[0]
  if new_cmap[key]['correctness'] == "correct":
    return

  hint = get_hint(solutions[i], ans, hint_text_id, i)
  new_cmap.set_hint_and_mode(aid,hint,'always')
    </script>

        
    <script type="text/javascript" src="/static/js/adaptive_hint.js"></script>
    <script type="text/javascript">                             
      for (var i=0; i != hint_number; i++) {
        hide_hint(i);
      }
      show_hint(hint_number);
    </script>

  </text>
</problem>