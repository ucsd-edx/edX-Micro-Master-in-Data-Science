<problem>
  <text>
    <script type="loncapa/python">

# random variables (no need to import random library)

k = 0.0+random.randrange(1,2,1);
r = 0.0+random.randrange(1,2,1);
a = 0.0+random.randrange(800,1200,100);
select = 0.0+random.randrange(8,15,1);
s = (1.*a)/10;

j = 0.0+random.randrange(1,3,1);

x = 0.0+random.randrange(12,15,1);
y = 0.0+random.randrange(5,6,1);

for name in ['k','r','a','select','s','j','x','y']:
    print name,locals()[name]


# Solutions with variables converted to string
# Make sure you name the solution with part id at the end. e.g. 'solution1' will be solution for part 1.
solution1 = "{0}*1/{1}".format(s,a)
solution2 = "e^{{(-.1)}}*(.1)^{{({0})}}/{0}!".format(j)
solution3 = "e^{{(-{0}/{0})}}".format(s)

# Group all solutions into a list
solutions = [solution1,solution2,solution3]
print 'solutions=\n','\n'.join(["%2d: %s"%(i,solutions[i]) for i in range(len(solutions))])
# hint text id
hint_text_id = ["cse103fall2016week1problem1part1","cse103fall2016week1problem1part2"]
    </script>

    <script type="text/javascript">
      //fill in number of hint
        var hint_number = 2;

      //fill in hint input box id
        var hintIds = ["input_57ccdc78397649aca59b419c95573254_2_1",
                "input_1ddc9e0c3eea4ba3b61b291a7cfb650d_2_1"];

      //fill in problem input box id
        var proIds = ["input_0463a3ce78dd46429e9e2fcf681616d9_2_1",
               "input_0463a3ce78dd46429e9e2fcf681616d9_3_1"];
               
      //fill in hint text id. Need to match the hint_text_id from above
        var hintTextIds = ["cse103fall2016week1problem1part1",
                  "cse103fall2016week1problem1part2"];
    </script>



<h3>Typesetting errors</h3>
<p>There is a typesetter who, on average, makes one mistake per \($a\) words. 
Assume that he is setting a book with \($s\) words to a page. Let \(S\) be a random variable corresponding to the number of mistakes that the typesetter makes on a single page.</p>
<p>Strictly speaking, the distribution of the mistakes is a binomial distribution, because, the number of mistakes is at most the number of words. However as \($a\) and \($s\) are large numbers, we can approximate the distribution as a Poisson process.</p>
<ul>
<li>What is the expected number of mistakes per page? \(E(S)=\)?</li>
</ul>


    <customresponse cfn="check" expect="\[$solution1\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


<ul>
<li>What is the probability that  \(S = $j\)?</li>
</ul>


    <customresponse cfn="check" expect="\[$solution2\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


<ul>
<li>What is the probability that the number of words from one mistake to the next is at least \($s\)?</li>
</ul>


    <customresponse cfn="check" expect="\[$solution3\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>



    
    

    

    <script type="loncapa/python">
from hint import evaluate
from hint.get_hint import get_hint

# grader of the problem
def check(expect, ans):
  return evaluate.evaluate(expect, ans)

# hint function
def hint_fn(answer_ids, student_answers, new_cmap, old_cmap):
  aid = answer_ids[0]
  ans = str(student_answers[aid])
  i = int(aid[-3])-2

  if ans == "":
    return
  key = new_cmap.keys()[0]
  if new_cmap[key]['correctness'] == "correct":
    return

  hint = get_hint(solutions[i], ans, hint_text_id, i)
  new_cmap.set_hint_and_mode(aid,hint,'always')
    </script>

        
    <script type="text/javascript" src="/static/js/adaptive_hint.js"></script>
    <script type="text/javascript">                             
      for (var i=0; i != hint_number; i++) {
        hide_hint(i);
      }
      show_hint(hint_number);
    </script>

  </text>
</problem>