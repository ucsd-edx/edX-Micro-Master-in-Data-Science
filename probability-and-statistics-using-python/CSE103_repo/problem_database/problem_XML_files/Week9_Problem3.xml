<problem>
  <text>
    <script type="loncapa/python">
# random variables (no need to import random library)


# Solutions with variables converted to string
# Make sure you name the solution with part id at the end. e.g. 'solution1' will be solution for part 1.
solution1 = "0.05/sqrt(0.16/200)"
solution2 = "Q(0.05/sqrt(0.16/200))"
solution3 = "1"
solution4 = "0"

# Group all solutions into a list
solutions = [solution1, solution2, solution3, solution4]



# hint text id
hint_text_id = ["cse103fall2016week1problem1part1","cse103fall2016week1problem1part2"]
    </script>

    <script type="text/javascript">
      //fill in number of hint
        var hint_number = 2;

      //fill in hint input box id
        var hintIds = ["input_57ccdc78397649aca59b419c95573254_2_1",
                "input_1ddc9e0c3eea4ba3b61b291a7cfb650d_2_1"];

      //fill in problem input box id
        var proIds = ["input_0463a3ce78dd46429e9e2fcf681616d9_2_1",
               "input_0463a3ce78dd46429e9e2fcf681616d9_3_1"];
               
      //fill in hint text id. Need to match the hint_text_id from above
        var hintTextIds = ["cse103fall2016week1problem1part1",
                  "cse103fall2016week1problem1part2"];
    </script>



<h3>Testing a psychic</h3>
<p>A noted psychic was tested for extrasensory perception. The psychic was presented
with 200 cards face down and asked to determine if the card were one of five symbols. We can think of this as 200 independent trials and associate a binary random variable \(X_i\) with each trial, where the probability of success is denoted by \(p \doteq P(X_i=1)\). The Null hypothesis is that the Psychic is doing no better than a random guess, in other words \(p=1/5\).</p>
<p>The expected number of correct guesses is denoted
\[S_{200} = \sum_{i=1}^{200} X_i \]</p>
<p>\[ E\left[ S_{200}\right] = 200*(1/5)=40\]</p>
<p>In our test, the psychic was correct 50 times, in other words, 10 more times than expected. How strong is this as evidence that the psychic is actually able to predict better than chance?</p>
<p>As \(S_{200}\) is the sum of 200 IID random variables with finite mean and std. We can approximate \(S_{200}\) by a normal distribution (using the central limit theorem).</p>
<ul>
<li>What is the z-score?</li>
</ul>


    <customresponse cfn="check" expect="\[$solution1\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


<ul>
<li>What is the p-value for the test statistic? (use the \(Q\) function in your answer)</li>
</ul>


    <customresponse cfn="check" expect="\[$solution2\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


<ul>
<li>Can you reject at the .05 significance level? (answer 1 for yes or 0 for no)</li>
</ul>
<p>(Recall the values of the \(Q\) function:
\[Q(1) \approx 15\%;\;\;
Q(2) \approx 2.5\%;\;\;
Q(3) \approx 0.15\%;\;\;
Q(4) \approx 0.003\%
\]</p>


    <choiceresponse>
      <checkboxgroup>
<choice correct="true">Yes.</choice>
<choice correct="false">No.</choice>
      </checkboxgroup>
    </choiceresponse>


<ul>
<li>Can you reject at the .01 significance level? (answer 1 for yes or 0 for no)</li>
</ul>


    <choiceresponse>
      <checkboxgroup>
<choice correct="false">Yes.</choice>
<choice correct="true">No.</choice>
      </checkboxgroup>
    </choiceresponse>


    

    

    <script type="loncapa/python">
from hint import evaluate
from hint.get_hint import get_hint

# grader of the problem
def check(expect, ans):
  return evaluate.evaluate(expect, ans)

# hint function
def hint_fn(answer_ids, student_answers, new_cmap, old_cmap):
  aid = answer_ids[0]
  ans = str(student_answers[aid])
  i = int(aid[-3])-2

  if ans == "":
    return
  key = new_cmap.keys()[0]
  if new_cmap[key]['correctness'] == "correct":
    return

  hint = get_hint(solutions[i], ans, hint_text_id, i)
  new_cmap.set_hint_and_mode(aid,hint,'always')
    </script>

        
    <script type="text/javascript" src="/static/js/adaptive_hint.js"></script>
    <script type="text/javascript">                             
      for (var i=0; i != hint_number; i++) {
        hide_hint(i);
      }
      show_hint(hint_number);
    </script>

  </text>
</problem>