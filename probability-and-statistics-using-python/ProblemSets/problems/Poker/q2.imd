```python
nCards=random.randrange(4,5,1)
b=random.randrange(2,nCards-1,1)
c = nCards-b

solution1 = "C(52,{0})".format(nCards)
solution2 = "4"
solution3 = "C(13,{0})".format(b)
solution4 = "52 - 13"
solution5 = "C(39, {1} - {0})".format(b,nCards)
solution6 = "4*C(13,{0})*C(39,{1}-{0})".format(b,nCards)
solution7 = "4*C(13,{0})*C(39,{1}-{0})/C(52,{1})".format(b,nCards)
if nCards >= b*2:
      solution7 = "(4*C(13,{0})*C(39,{1}-{0})-C(4,2)*C(13,{0})*C(13,{0}))/C(52,{1})".format(b,nCards)

solutions = [solution1,solution2,solution3,solution4,solution5,solution6, solution7]
```
## Probability of cards of the same suit ##
A poker hand consisting of \$nCards cards is dealt from a standard deck of 52 cards. Find the probability that the hand contains exactly \$b cards of the same suit. It is allowed to have any number of cards in other suits.

First, we know the number of all possible hands of \$nCards cards is

[_]

Then, we calculate the number of hands that contain exactly \$b cards of the same suit.

We first choose which suit the \$b cards is. How many possibilities are there?

[_]

The number of possibilities for the ranks of these cards is

[_]

The other \$c cards in the hand can be any cards that has a different suit than the \$b cards. How many are there?

[_]

How many possible ways to choose \$c from them.

[_]


Thus we can compute the number of hands that have exactly \$b cards of the same suit, which is

[_]

Finally we can calculate the probability of such hands, by calculating the ratio of the number of such hands to the number of all hands. This is

[_]
